#!/usr/env python3
"""Software for setting up Dapc Linux development environment."""

import argparse
import getpass
import json
import os
import subprocess
import sys
from distutils.dir_util import copy_tree
from pathlib import Path
from shutil import copyfile
from jinja2.exceptions import TemplateNotFound

from lib.TemplateHandler import View
from lib.ThemeController import ThemeController

from lib import utils


class TemplateController:
    """Class for transforming the templates into actual config files for various software."""
    def __init__(self, theme: str, overwrite: bool):
        self.user = getpass.getuser()
        self.view = View(theme)
        self.overwrite = overwrite
        self.target = self._set_target()

    def _set_target(self) -> str:
        return f"/home/{self.user}/.config" if self.overwrite else f"{os.getcwd()}/target"

    def _get_destination(self, target, template) -> Path:
        destination = target if target and self.overwrite else self.target
        return Path(f"{destination}/{template}".replace('~', f'/home/{self.user}'))

    def _render(self, entry) -> None:
        """Render the template into the destination."""
        target = entry.get('target')
        template = entry.get('template')
        executable = entry.get('executable')

        dest = self._get_destination(target, template)
        if not os.path.exists(dest.parent):
            os.makedirs(dest.parent)

        try:
            self.view.render(template, dest)
        except TemplateNotFound:
            print(f'Template not found {template}')
            return

        if executable:
            utils.make_executable(dest)

    def copy_file(self, source, target) -> None:
        """Move source to target, without render any template value placeholders."""

        if not self.overwrite:
            basename = os.path.basename(source)
            target = f"{self.target}/{basename}"
        print(f"Copying {source} to {target}")

        if os.path.isdir(source):
            copy_tree(source, target)
        else:
            copyfile(source, str(target))

    def _render_background(self) -> None:
        """Render background to ~/.local/background.jpg.
        If overwrite is set to True, set background with 'feh'
        """
        if not self.overwrite:
            return
        background = self.view.get_context_value("bg")
        self.copy_file(
            f"templates/images/{background}",
            f"/home/{self.user}/.local/background.jpg",
        )
        subprocess.run(
            ["feh", "--bg-fill", f"/home/{self.user}/.local/background.jpg"],
            check=True,
        )

    def render_templates(self) -> None:
        """Render templates defined in templates.json."""
        with open('templates.json', 'r') as file:
            templates_to_be_rendered = json.load(file)
        for entry in templates_to_be_rendered:
            self._render(entry)
        self._render_background()


def setup_argparser():
    """Setup the arguments of the program."""
    arg_parser = argparse.ArgumentParser(
        prog="rice_it",
        description="Dapc ricer, make your environment consistent from a color perspective.",
    )
    arg_parser.add_argument(
        "-o",
        "--overwrite",
        help="Make rice_it overwrite existing dotfiles in your home directory, use with caution!",
        action="store_true",
        default=False,
    )
    arg_parser.add_argument(
        "-t",
        "--theme",
        action="store",
        dest="theme",
        help="Specify which theme the context will be loaded from.",
    )
    arg_parser.add_argument(
        "-l",
        "--list",
        action="store_true",
        help="List available themes",
    )

    return arg_parser


def main():
    """Entrypoint to the Controller."""
    parser = setup_argparser()
    args = parser.parse_args()
    tc = ThemeController(args)
    theme = tc.get_theme()
    controller = TemplateController(theme, args.overwrite)
    controller.render_templates()

    sys.exit(0)


if __name__ == "__main__":
    main()
