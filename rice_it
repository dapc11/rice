#!/usr/env python3
"""Software for setting up Dapc Linux development environment."""

import argparse
import getpass
import json
import os
import subprocess
import sys
from distutils.dir_util import copy_tree
from pathlib import Path
from shutil import copyfile

from jinja2.exceptions import TemplateNotFound

from lib import utils
from lib.ThemeController import ThemeController
from lib.View import View


class Templates:
    def __init__(self, templates_path, overwrite) -> None:
        self.templates_path = templates_path
        self.overwrite = overwrite

    def __enter__(self):
        with open(self.templates_path, "r") as file:
            templates = json.load(file)
            return [Template(t, self.overwrite) for t in templates]

    def __exit__(self, exception_type, exception_value, exception_traceback):
        pass


class Template:
    def __init__(self, template_as_json, overwrite) -> None:
        self.template = template_as_json
        self.overwrite = overwrite

    @property
    def path(self) -> str:
        return self.template.get("template")

    @property
    def target(self) -> Path:
        target = self.template.get("target")
        if not self.overwrite or not target:
            target = (
                f"/home/{getpass.getuser()}/.config"
                if self.overwrite
                else f"{os.getcwd()}/target"
            )
        return Path(f"{target}/{self.path}".replace("~", f"/home/{getpass.getuser()}"))

    @property
    def executable(self) -> bool:
        return self.template["executable"] if self.template.get("executable") else False

    def __repr__(self) -> str:
        return f"{self.path}"

    def create_parents(self) -> None:
        if not os.path.exists(self.target.parent):
            os.makedirs(self.target.parent)


class TemplateController:
    """Class for transforming the templates into actual config files for various software."""

    def __init__(self, theme: str, overwrite: bool):
        self.view = View(theme)
        self.overwrite = overwrite

    def copy_file(self, source, target) -> None:
        """Move source to target, without render any template value placeholders."""

        if not self.overwrite:
            basename = os.path.basename(source)
            target = f"{self.target}/{basename}"
        print(f"Copying {source} to {target}")

        if os.path.isdir(source):
            copy_tree(source, target)
        else:
            copyfile(source, str(target))

    def _render_background(self) -> None:
        """Render background to ~/.local/background.jpg.
        If overwrite is set to True, set background with 'feh'
        """
        if not self.overwrite:
            return
        background = self.view.get_context_value("bg")
        self.copy_file(
            f"templates/images/{background}",
            f"/home/{getpass.getuser()}/.local/background.jpg",
        )
        subprocess.run(
            ["feh", "--bg-fill", f"/home/{getpass.getuser()}/.local/background.jpg"],
            check=True,
        )

    def render_templates(self) -> None:
        """Render templates defined in templates.json."""
        with Templates("templates.json", self.overwrite) as templates:
            for template in templates:
                template.create_parents()

                try:
                    self.view.render(template)
                except TemplateNotFound:
                    print(f"Template not found {template}")
                    continue

                if template.executable:
                    utils.make_executable(template.target)
            self._render_background()


def setup_argparser() -> argparse.ArgumentParser:
    """Setup the arguments of the program."""
    arg_parser = argparse.ArgumentParser(
        prog="rice_it",
        description="Dapc ricer, make your environment consistent from a color perspective.",
    )
    arg_parser.add_argument(
        "-o",
        "--overwrite",
        help="Make rice_it overwrite existing dotfiles in your home directory, use with caution!",
        action="store_true",
        default=False,
    )
    arg_parser.add_argument(
        "-t",
        "--theme",
        action="store",
        dest="theme",
        help="Specify which theme the context will be loaded from.",
    )
    arg_parser.add_argument(
        "-l",
        "--list",
        action="store_true",
        help="List available themes",
    )

    return arg_parser


def main():
    """Entrypoint to the Controller."""
    parser = setup_argparser()
    args = parser.parse_args()
    tc = ThemeController(args)
    theme = tc.get_theme()
    controller = TemplateController(theme, args.overwrite)
    controller.render_templates()

    sys.exit(0)


if __name__ == "__main__":
    main()
