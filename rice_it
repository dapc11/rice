#!/usr/bin/python3
"""Software for setting up Dapc Linux development environment."""

import argparse
import getpass
import glob
import os
import subprocess
import sys
from distutils.dir_util import copy_tree
from pathlib import Path
from shutil import copyfile

from lib.TemplateHandler import TemplateHandler

from lib import utils


class Ricer:
    """Class for transforming the templates into actual config files for various software."""

    EXECUTABLE = True

    def __init__(self, args):
        self.user = getpass.getuser()
        self.overwrite = args.overwrite
        self.template_handler = TemplateHandler(args.theme)

        if self.overwrite:
            self.target = f"/home/{self.user}/.config"
        else:
            self.target = f"{os.getcwd()}/target"

    def _get_destination(self, template):
        dest = f"{self.target}/{template}"
        parent = Path(dest).parent

        if not os.path.exists(parent):
            os.makedirs(parent)

        return dest

    def set_target_dir(self, target):
        """More or less changing current working dir for template rendering."""
        if self.overwrite:
            self.target = target

    def _render(self, name, executable=False):
        """Render the template into the destination.

        Destination is decided based on overwrite flag.
        If true, destination will be relative path inside the home dir.
        If false, the template will be rendered into a target dir within this project.
        """
        dest = self._get_destination(name)
        self.template_handler.render(name, dest)

        if executable:
            utils.make_executable(dest)

    def copy_file(self, source, target):
        """Move source to target, without render any template value placeholders."""

        if not self.overwrite:
            basename = os.path.basename(source)
            target = f"{self.target}/{basename}"
        print(f"Copying {source} to {target}")

        if os.path.isdir(source):
            copy_tree(source, target)
        else:
            copyfile(source, str(target))

    def render_templates(self):

        self.render_vim()
        self.render_rofi()

        if self.template_handler.get_context_value("window_manager") == "awesome":
            self.render_awesome()
        else:
            self._render("i3/config")
            self.render_background()
            self.render_polybar()
        self.render_vs_code()
        self._render("alacritty/alacritty.yml")
        self._render("dunst/dunstrc")
        self._render("ranger/rc.conf")
        self._render("yamllint/config")
        self._render("compton/compton.conf")
        self._render("qtile/config.py")
        self.set_target_dir(f"/home/{self.user}")
        self._render(".tmux.conf")
        self._render(".zshrc")
        self._render(".xprofile")
        self._render(".zprofile")
        self._render(".Xresources")
        self.render_utils()

    def render_vim(self):
        """Render Vim templates."""
        self._render("nvim/lua/dapc/telescope.lua")
        self._render("nvim/lua/dapc/init.lua")
        self._render("nvim/options.vim")
        self._render("nvim/mappings.vim")
        self._render("nvim/colors/dapc11.vim")
        self._render("nvim/fzf.vim")
        self._render("nvim/init.vim")
        self._render("nvim/plugin/plenary.vim")
        self._render("nvim/plugin/telescope.vim")
        self._render("nvim/plugin/navigation.vim")
        self._render("nvim/plugin/netrw.vim")
        self._render("nvim/plugin/vimspector.vim")
        self._render("nvim/plugins.vim")
        self._render("nvim/statusline.vim")

    def render_awesome(self):
        """Render AwesomeWM templates."""
        self._render("awesome/rc.lua")
        self._render("awesome/theme.lua")
        self.copy_file("templates/awesome/sysact", f"/home/{self.user}/.local/bin/sysact")
        utils.make_executable(f"/home/{self.user}/.local/bin/sysact")
        background = self.template_handler.get_context_value("bg")
        self.copy_file(
            f"templates/images/{background}",
            f"/home/{self.user}/.config/awesome/background.jpg",
        )
        self.copy_file(
            "templates/awesome/widgets",
            f"/home/{self.user}/.config/awesome/widgets",
        )
        self.copy_file(
            "templates/awesome/icons",
            f"/home/{self.user}/.config/awesome/icons",
        )

    def render_background(self):
        """Render background to ~/.local/background.jpg.
        If overwrite is set to True, set background with 'feh'
        """
        background = self.template_handler.get_context_value("bg")
        self.copy_file(
            f"templates/images/{background}",
            f"/home/{self.user}/.local/background.jpg",
        )

        if self.overwrite:
            subprocess.run(
                ["feh", "--bg-fill", f"/home/{self.user}/.local/background.jpg"],
                check=True,
            )

    def render_vs_code(self):
        """Render VS Code templates."""
        self._render("Code/User/settings.json")
        self._render("Code/User/keybindings.json")

    def render_rofi(self):
        """Render Rofi templates."""
        self._render("rofi/config.rasi")
        self._render("rofi/powermenu.rasi")
        self._render("rofi/rofi-power", self.EXECUTABLE)
        self._render("rofi/rofi-randr", self.EXECUTABLE)

    def render_polybar(self):
        """Render Polybar templates."""
        self._render("polybar/config")
        self._render("polybar/startup.sh", self.EXECUTABLE)
        self._render("polybar/updates.sh", self.EXECUTABLE)
        self._render("polybar/now_playing.py", self.EXECUTABLE)
        self._render("polybar/weather.sh", self.EXECUTABLE)

    def render_utils(self):
        """Render utility scripts."""
        self.set_target_dir(f"/home/{self.user}/.local")


def setup_argparser():
    """Setup the arguments of the program."""
    arg_parser = argparse.ArgumentParser(
        prog="rice_it",
        description="Dapc ricer, make your environment consistent from a color perspective.",
    )
    arg_parser.add_argument(
        "-o",
        "--overwrite",
        help="Make rice_it overwrite existing dotfiles in your home directory,"
        " use with caution!",
        action="store_true",
    )
    arg_parser.add_argument(
        "-t",
        "--theme",
        action="store",
        dest="theme",
        help="Specify which theme the context will be loaded from.",
    )
    arg_parser.add_argument(
        "-l",
        "--list",
        action="store_true",
        help="List available themes",
    )

    return arg_parser


def get_themes():
    """Utility function for visualizing which themes that are available."""
    theme_names = []

    for theme_path in glob.glob("themes/*.json"):
        if "settings" in theme_path:
            continue
        theme_names.append(os.path.splitext(os.path.basename(theme_path))[0])

    return theme_names


def main():
    """Entrypoint to the Ricer."""
    parser = setup_argparser()
    themes = get_themes()
    args = parser.parse_args()

    if args.list or args.theme is None:
        print("Specify theme with --theme (-t) flag.\nAvailable themes:")

        for theme in themes:
            print(f"- {theme}")
        sys.exit(0)

    ricer = Ricer(args)
    ricer.render_templates()

    sys.exit(0)


if __name__ == "__main__":
    main()
