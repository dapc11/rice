#!/usr/env python3
"""Software for setting up Dapc Linux development environment."""

import argparse
import getpass
import json
import os
import subprocess
import sys
from distutils.dir_util import copy_tree
from pathlib import Path
from shutil import copyfile

import jinja2
from jinja2.exceptions import TemplateNotFound

from lib import utils
from lib.ThemeController import ThemeController


class Templates:
    def __init__(self, templates_path, overwrite, theme) -> None:
        self.templates_path = templates_path
        self.overwrite = overwrite
        self.env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(searchpath="./templates/"),
        )
        self.context = utils.get_context(theme)
        self._file = None

    def __enter__(self):
        self._file = open(self.templates_path, "r")
        templates = json.load(self._file)
        return [Template(t, self.overwrite, self.env, self.context) for t in templates]

    def __exit__(self, *args):
        self._file.close()


class Template:
    def __init__(self, metadata, overwrite, env, context) -> None:
        self.metadata = metadata
        self.overwrite = overwrite
        self.env = env
        self.context = context

    @property
    def template(self) -> str:
        return self.metadata.get("template")

    @property
    def target(self) -> Path:
        target = self.metadata.get("destination")
        if not self.overwrite or not target:
            target = (
                f"/home/{getpass.getuser()}/.config"
                if self.overwrite
                else f"{os.getcwd()}/target"
            )
        return Path(
            f"{target}/{self.template}".replace("~", f"/home/{getpass.getuser()}")
        )

    @property
    def executable(self) -> bool:
        executable = self.metadata.get("executable")
        return executable if executable else False

    @property
    def content(self) -> bool:
        t = self.env.get_template(self.template)
        return t.render(self.context)

    def __repr__(self) -> str:
        return f"{self.template}"

    def create_parents(self) -> None:
        if not os.path.exists(self.target.parent):
            os.makedirs(self.target.parent)

    def render(self) -> None:
        print(f"Writing to {self.target}")

        try:
            with open(self.target, "w") as target:
                target.write(self.content)
        except TemplateNotFound:
            print(f"Template not found {self.template}")

    def make_executable(self):
        """Make given file executeable."""
        mode = os.stat(self.target).st_mode
        mode |= (mode & 0o444) >> 2  # copy R bits to X
        os.chmod(self.target, mode)


class TemplateController:
    """Class for transforming the templates into actual config files for various software."""

    def __init__(self, theme: str, overwrite: bool):
        self.theme = theme
        self.overwrite = overwrite

    @staticmethod
    def copy_file(source, target) -> None:
        """Move source to target, without render any template value placeholders."""

        if os.path.isdir(source):
            copy_tree(source, target)
        else:
            copyfile(source, str(target))

    def render_templates(self) -> None:
        """Render templates defined in templates.json."""
        with Templates("templates.json", self.overwrite, self.theme) as templates:
            for template in templates:
                template.create_parents()
                template.render()

                if template.executable:
                    template.make_executable()


def setup_argparser() -> argparse.ArgumentParser:
    """Setup the arguments of the program."""
    arg_parser = argparse.ArgumentParser(
        prog="rice_it",
        description="Dapc ricer, make your environment consistent from a color perspective.",
    )
    arg_parser.add_argument(
        "-o",
        "--overwrite",
        help="Make rice_it overwrite existing dotfiles in your home directory, use with caution!",
        action="store_true",
        default=False,
    )
    arg_parser.add_argument(
        "-t",
        "--theme",
        action="store",
        dest="theme",
        help="Specify which theme the context will be loaded from.",
    )
    arg_parser.add_argument(
        "-l",
        "--list",
        action="store_true",
        help="List available themes",
    )

    return arg_parser


def main():
    """Entrypoint to the Controller."""
    parser = setup_argparser()
    args = parser.parse_args()
    tc = ThemeController(args)
    theme = tc.get_theme()
    controller = TemplateController(theme, args.overwrite)
    controller.render_templates()

    sys.exit(0)


if __name__ == "__main__":
    main()
